// <auto-generated />
using System;
using Elpida.Backend.DataUpdater;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Elpida.Backend.DataUpdater.Migrations
{
    [DbContext(typeof(ElpidaCtx))]
    partial class ElpidaCtxModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.4");

            modelBuilder.Entity("Elpida.Backend.Data.Abstractions.Models.BenchmarkModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Benchmarks");
                });

            modelBuilder.Entity("Elpida.Backend.Data.Abstractions.Models.Cpu.CpuCacheModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Associativity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("CpuModelId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LineSize")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LinesPerTag")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("Size")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CpuModelId");

                    b.ToTable("CpuCacheModel");
                });

            modelBuilder.Entity("Elpida.Backend.Data.Abstractions.Models.Cpu.CpuModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Features")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("Frequency")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Smt")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Vendor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Cpus");
                });

            modelBuilder.Entity("Elpida.Backend.Data.Abstractions.Models.Result.ResultModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Affinity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("BenchmarkId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CompilerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CompilerVersion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("CpuId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ElpidaVersion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("JoinOverhead")
                        .HasColumnType("REAL");

                    b.Property<double>("LockOverhead")
                        .HasColumnType("REAL");

                    b.Property<double>("LoopOverhead")
                        .HasColumnType("REAL");

                    b.Property<long>("MemorySize")
                        .HasColumnType("INTEGER");

                    b.Property<double>("NotifyOverhead")
                        .HasColumnType("REAL");

                    b.Property<double>("NowOverhead")
                        .HasColumnType("REAL");

                    b.Property<string>("OsCategory")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OsName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OsVersion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("PageSize")
                        .HasColumnType("INTEGER");

                    b.Property<double>("SleepOverhead")
                        .HasColumnType("REAL");

                    b.Property<double>("TargetTime")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("TEXT");

                    b.Property<long?>("TopologyId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("WakeupOverhead")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("BenchmarkId");

                    b.HasIndex("CpuId");

                    b.HasIndex("TopologyId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("Elpida.Backend.Data.Abstractions.Models.Result.TaskResultModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("InputSize")
                        .HasColumnType("INTEGER");

                    b.Property<double>("MarginOfError")
                        .HasColumnType("REAL");

                    b.Property<double>("Max")
                        .HasColumnType("REAL");

                    b.Property<double>("Mean")
                        .HasColumnType("REAL");

                    b.Property<double>("Min")
                        .HasColumnType("REAL");

                    b.Property<long?>("ResultModelId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SampleSize")
                        .HasColumnType("INTEGER");

                    b.Property<double>("StandardDeviation")
                        .HasColumnType("REAL");

                    b.Property<long?>("TaskId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Tau")
                        .HasColumnType("REAL");

                    b.Property<double>("Time")
                        .HasColumnType("REAL");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ResultModelId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskResultModel");
                });

            modelBuilder.Entity("Elpida.Backend.Data.Abstractions.Models.Task.TaskModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("BenchmarkModelId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("InputDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("InputName")
                        .HasColumnType("TEXT");

                    b.Property<string>("InputProperties")
                        .HasColumnType("TEXT");

                    b.Property<string>("InputUnit")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OutputDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("OutputName")
                        .HasColumnType("TEXT");

                    b.Property<string>("OutputProperties")
                        .HasColumnType("TEXT");

                    b.Property<string>("OutputUnit")
                        .HasColumnType("TEXT");

                    b.Property<int>("ResultAggregation")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ResultDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ResultName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ResultType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ResultUnit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BenchmarkModelId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Elpida.Backend.Data.Abstractions.Models.Topology.TopologyModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CpuBrand")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Root")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TopologyHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalDepth")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalLogicalCores")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalPhysicalCores")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Topologies");
                });

            modelBuilder.Entity("Elpida.Backend.Data.Abstractions.Models.Cpu.CpuCacheModel", b =>
                {
                    b.HasOne("Elpida.Backend.Data.Abstractions.Models.Cpu.CpuModel", null)
                        .WithMany("Caches")
                        .HasForeignKey("CpuModelId");
                });

            modelBuilder.Entity("Elpida.Backend.Data.Abstractions.Models.Result.ResultModel", b =>
                {
                    b.HasOne("Elpida.Backend.Data.Abstractions.Models.BenchmarkModel", "Benchmark")
                        .WithMany()
                        .HasForeignKey("BenchmarkId");

                    b.HasOne("Elpida.Backend.Data.Abstractions.Models.Cpu.CpuModel", "Cpu")
                        .WithMany()
                        .HasForeignKey("CpuId");

                    b.HasOne("Elpida.Backend.Data.Abstractions.Models.Topology.TopologyModel", "Topology")
                        .WithMany()
                        .HasForeignKey("TopologyId");

                    b.Navigation("Benchmark");

                    b.Navigation("Cpu");

                    b.Navigation("Topology");
                });

            modelBuilder.Entity("Elpida.Backend.Data.Abstractions.Models.Result.TaskResultModel", b =>
                {
                    b.HasOne("Elpida.Backend.Data.Abstractions.Models.Result.ResultModel", null)
                        .WithMany("TaskResults")
                        .HasForeignKey("ResultModelId");

                    b.HasOne("Elpida.Backend.Data.Abstractions.Models.Task.TaskModel", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Elpida.Backend.Data.Abstractions.Models.Task.TaskModel", b =>
                {
                    b.HasOne("Elpida.Backend.Data.Abstractions.Models.BenchmarkModel", null)
                        .WithMany("Tasks")
                        .HasForeignKey("BenchmarkModelId");
                });

            modelBuilder.Entity("Elpida.Backend.Data.Abstractions.Models.BenchmarkModel", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Elpida.Backend.Data.Abstractions.Models.Cpu.CpuModel", b =>
                {
                    b.Navigation("Caches");
                });

            modelBuilder.Entity("Elpida.Backend.Data.Abstractions.Models.Result.ResultModel", b =>
                {
                    b.Navigation("TaskResults");
                });
#pragma warning restore 612, 618
        }
    }
}
