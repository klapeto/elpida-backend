@using Elpida.Web.Frontend.Pages
@using Microsoft.Extensions.Logging
@using Elpida.Web.Frontend.Models.Filters
@using Elpida.Web.Frontend.Shared.Components.Filters
@using Elpida.Backend.Services.Abstractions
@using Elpida.Web.Frontend.Models

<EditForm EditContext="@_editContext" OnSubmit="@HandleSubmit" class="query-form">
    @foreach (var filter in Model.Filters)
    {
        <span class="query-filter">@CreateView(filter)</span>
    }

    @if (AllowSort)
    {
        <div class="query-filter">
            <label>
                <span>Sort by</span>
                <InputSelect TValue="string" @bind-Value="Model.SortBy">
                    <option value=""></option>
                    @foreach (var filter in Model.Filters)
                    {
                        <option value="@filter.InternalName">@filter.Name</option>
                    }
                </InputSelect>
            </label>

            <label>
                <span>Descending</span>
                <InputCheckbox @bind-Value="Model.Descending"/>
            </label>
        </div>
    }

    <div class="query-controls">
        <button type="submit">Submit</button>
        <button type="reset" @onclick="Reset">Reset</button>
    </div>

</EditForm>


@code {

    [Parameter]
    public QueryModel Model { get; set; }

    [Parameter]
    public bool AllowSort { get; set; }

    [Parameter]
    public EventCallback Submitted { get; set; }

    private EditContext? _editContext;

    protected override void OnInitialized()
    {
        _editContext = new EditContext(Model);
    }

    private async Task HandleSubmit()
    {
        await Submitted.InvokeAsync();
    }

    private void Reset()
    {
        foreach (var filterModel in Model.Filters)
        {
            filterModel.Reset();
        }
        _editContext = new EditContext(Model);
    }

    private RenderFragment CreateRangeFilterView(RangeFilterModel rangeFilter)
    {
        return @<RangeFilterView Model="rangeFilter"/>;
    }

    private RenderFragment CreateNumberFilterView(NumberFilterModel numberFilter)
    {
        return @<NumberFilterView Model="numberFilter"/>;
    }
    
    private RenderFragment CreateDateFilterView(DateTimeFilterModel dateTimeFilter)
    {
        return @<DateFilterView Model="dateTimeFilter"/>;
    }
    
    private RenderFragment CreateOptionFilterView(OptionFilterModel optionFilter)
    {
        return @<OptionFilterView Model="optionFilter"/>;
    }
    
    private RenderFragment CreateStringFilterView(StringFilterModel stringFilter)
    {
        return @<StringFilterView Model="stringFilter"/>;
    }
    
    private RenderFragment CreateView(FilterModel filterModel)
    {
        switch (filterModel)
        {
            case RangeFilterModel rangeFilter:
                return CreateRangeFilterView(rangeFilter);
            case NumberFilterModel numberFilter:
                return CreateNumberFilterView(numberFilter);
            case DateTimeFilterModel dateTimeFilter:
                return CreateDateFilterView(dateTimeFilter);
            case OptionFilterModel optionFilter:
                return CreateOptionFilterView(optionFilter);
            case StringFilterModel stringFilter:
                return CreateStringFilterView(stringFilter);
            default:
                throw new NotImplementedException(filterModel.GetType().FullName);
        }
    }

}