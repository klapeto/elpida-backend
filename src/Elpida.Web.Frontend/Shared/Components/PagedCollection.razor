@using Elpida.Backend.Services.Abstractions.Interfaces
@using Elpida.Backend.Services.Abstractions
@using System.Threading
@using Elpida.Web.Frontend.Interfaces
@using Elpida.Web.Frontend.Models
@using Elpida.Web.Frontend.Models.Filters
@using Elpida.Web.Frontend.Shared.Components.Filters
@using Microsoft.Extensions.Logging

@typeparam TDto
@typeparam TPreview

<h3>PagedCollection</h3>

<button class="button non-a-button medium @QueryButtonActiveClass" @onclick="OnQueryClick">
    <IconWithText IconName="query">
        @QueryButtonVerb query
    </IconWithText>
</button>

@if (_showQuery)
{
    <div class="flex-center column">
        <div class="flex-center row" style="margin: 1em">
            <h3>Query</h3>
            <button style="margin: 1em" class="button non-a-button medium @SimpleButtonActiveClass" @onclick="OnSimpleClick">
                Simple
            </button>
            <button class="button non-a-button medium @AdvancedButtonActiveClass" @onclick="OnAdvancedClick">
                Advanced
            </button>
        </div>
        <QueryEditor Model="_currentQueryModel" AllowSort="_showAdvanced" Submitted="OnQuerySubmitAsync"/>
    </div>
}

@if (_currentResults != null)
{
    foreach (var item in _currentResults.Items)
    {
        @ChildContent(item)
    }
}

<Pager CurrentPage="@_currentPageNumber" CurrentPageChanged="r => LoadPageAsync(_currentQueryModel, r)" PagesCount="@PageCount"/>

@inject ILogger<PagedCollection<TDto, TPreview>> _logger;

@code {
    
    private const int PageSize = 10;

    [Parameter]
    public IFrontendService<TDto, TPreview> Service { get; set; }

    [Parameter]
    public RenderFragment<TPreview> ChildContent { get; set; }
    
    [CascadingParameter]
    public Modal Modal { get; set; }
    
    [CascadingParameter]
    public Content Content { get; set; }

    private QueryModel _simpleQueryModel;
    private QueryModel _advancedQueryModel;
    private QueryModel _currentQueryModel;

    private PagedResult<TPreview>? _currentResults;

    private int PageCount => (int)(_currentResults?.TotalCount / PageSize ?? 0) + 1;

    private int _currentPageNumber;

    private string? QueryButtonActiveClass => _showQuery ? "active" : null;

    private string? AdvancedButtonActiveClass => _showAdvanced ? "active" : null;

    private string? SimpleButtonActiveClass => !_showAdvanced ? "active" : null;

    private string QueryButtonVerb => _showQuery ? "Hide" : "Show";

    private bool _showQuery;
    private bool _showAdvanced;

    private void OnQueryClick()
    {
        _showQuery = !_showQuery;
    }

    private void OnSimpleClick()
    {
        _showAdvanced = false;
        _currentQueryModel = _simpleQueryModel;
    }

    private void OnAdvancedClick()
    {
        _showAdvanced = true;
        _currentQueryModel = _advancedQueryModel;
    }

    protected override async Task OnInitializedAsync()
    {
        _simpleQueryModel = Service.CreateSimpleQueryModel();
        _advancedQueryModel = Service.CreateAdvancedQueryModel();
        _currentQueryModel = _simpleQueryModel;

        await LoadPageAsync(_advancedQueryModel, 0);
        await base.OnInitializedAsync();
    }

    private async Task LoadPageAsync(QueryModel queryModel, int pageNumber)
    {
        try
        {
            _currentResults = await Service.GetPagedPreviewsAsync(
                new QueryRequest(
                    new PageRequest(pageNumber * PageSize, PageSize), 
                    queryModel.Filters.Where(f=> f.IsSet).Select(f => f.CreateFilterInstance()).ToArray(),
                    queryModel.SortBy,
                    queryModel.Descending
                    ));
            _currentPageNumber = pageNumber;
           await Content.ResetScrollAsync();
        }
        catch (Exception e)
        {
            Modal.ShowError(e);
        }
    }
    
    private Task OnQuerySubmitAsync()
    {
       return LoadPageAsync(_currentQueryModel, 0);
    }

}