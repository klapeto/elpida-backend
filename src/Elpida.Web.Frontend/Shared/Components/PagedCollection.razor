@using Microsoft.Extensions.Logging
@using Elpida.Web.Frontend.Interfaces
@using Elpida.Web.Frontend.Models
@using Elpida.Backend.Services.Abstractions
@using Elpida.Web.Frontend.Models.Filters
@using Elpida.Web.Frontend.Services

@typeparam TDto        where TDto : Elpida.Backend.Services.Abstractions.Dtos.FoundationDto
@typeparam TPreview        where TPreview : Elpida.Backend.Services.Abstractions.Dtos.FoundationDto

<div class="flex-center column">

    <div class="collection-controls flex-center row">
        <button class="button non-a-button medium @QueryButtonActiveClass" @onclick="OnQueryClick">
            <IconWithText IconName="query">
                @QueryButtonVerb query
            </IconWithText>
        </button>
        <button class="button non-a-button medium" @onclick="RevertPageAsync">
            Revert page
        </button>

        @if (_searchModel is not null)
        {
            <label>
                Search:
                <input type="search" @bind-value="_searchModel.Value" placeholder="@_searchModel.Name (Enter)" @onkeyup="OnSearchAsync"/>
            </label>
        }
    </div>

    @if (_showQuery)
    {
        <GroupBox Title="Query editor">
            <div class="flex-center row">
                <button style="margin: 1em" class="button non-a-button medium @SimpleButtonActiveClass" @onclick="OnSimpleClick">
                    Simple
                </button>
                <button class="button non-a-button medium @AdvancedButtonActiveClass" @onclick="OnAdvancedClick">
                    Advanced
                </button>
            </div>
            <QueryEditor Model="_currentQueryModel" AllowSort="_showAdvanced" Submitted="OnQuerySubmitAsync"/>
        </GroupBox>
    }

    <p>Records found: @GetRecordsFoundString(), Pages: @PageCount</p>
</div>

@if (_currentResults != null)
{
    <ul>
        @foreach (var item in _currentResults.Items)
        {
            <li class="collection-item">
                @ChildContent(item)
            </li>
        }
    </ul>
}
else
{
    <div class="flex-center column" style="height: 10em">
        <div class="spinner"></div>
    </div>
}

<Pager CurrentPage="@_currentPageNumber" CurrentPageChanged="r => LoadPageAsync(_currentQueryModel, r)" PagesCount="@PageCount"/>

@code {

        private const int PageSize = 10;

    [Parameter]
    public IFrontEndService<TDto, TPreview> Service { get; set; }

    [Parameter]
    public RenderFragment<TPreview> ChildContent { get; set; }

    [CascadingParameter]
    public Modal Modal { get; set; }

    [CascadingParameter]
    public Content Content { get; set; }

    private QueryModel _simpleQueryModel;
    private QueryModel _advancedQueryModel;
    private QueryModel _currentQueryModel;
    private StringFilterModel? _searchModel;

    private PagedResult<TPreview>? _currentResults;

    private int PageCount => (int)Math.Floor(_currentResults?.TotalCount / (float)PageSize ?? 0.0);

    private int _currentPageNumber;

    private string? QueryButtonActiveClass => _showQuery ? "active" : null;

    private string? AdvancedButtonActiveClass => _showAdvanced ? "active" : null;

    private string? SimpleButtonActiveClass => !_showAdvanced ? "active" : null;

    private string QueryButtonVerb => _showQuery ? "Hide" : "Show";

    private bool _showQuery;
    private bool _showAdvanced;

    private void OnQueryClick()
    {
        _showQuery = !_showQuery;
    }

    private void OnSimpleClick()
    {
        _showAdvanced = false;
        _currentQueryModel = _simpleQueryModel;
    }

    private void OnAdvancedClick()
    {
        _showAdvanced = true;
        _currentQueryModel = _advancedQueryModel;
    }

    protected override async Task OnInitializedAsync()
    {
        await RevertPageAsync();
        await base.OnInitializedAsync();
    }

    private async Task LoadPageAsync(QueryModel queryModel, int pageNumber)
    {
        try
        {
            _currentResults = await Service.GetPagedPreviewsAsync(
                new QueryRequest(
                    new PageRequest(pageNumber * PageSize, PageSize),
                    queryModel.Filters.Where(f => f.IsSet).Select(f => f.CreateFilterInstance()).ToArray(),
                    queryModel.SortBy,
                    queryModel.Descending
                    ));
            _currentPageNumber = pageNumber;
            await Content.ResetScrollAsync();
        }
        catch (Exception e)
        {
            Modal.ShowError(e);
        }
    }

    private Task OnQuerySubmitAsync()
    {
        return LoadPageAsync(_currentQueryModel, 0);
    }

    private async Task OnSearchAsync(KeyboardEventArgs e)
    {
        if (e.Key != "Enter") return;

        if (!string.IsNullOrWhiteSpace(_searchModel?.Value))
        {
            await LoadPageAsync(new QueryModel(new[] { _searchModel }), 0);
        }
    }

    private string GetRecordsFoundString()
    {
        return _currentResults is not null ?
            ValueConverterService.ConvertToStringSI(_currentResults.TotalCount) :
            "0";
    }

    private async Task RevertPageAsync()
    {
        _currentResults = null; // hack to show the loading spinner until we get the results
        _simpleQueryModel = Service.CreateSimpleQueryModel();
        _advancedQueryModel = Service.CreateAdvancedQueryModel();
        _searchModel = Service.CreateSearchFilterModel();
        if (_searchModel is not null)
        {
            _searchModel.Comparison = FilterMaps.ComparisonMap[FilterComparison.Contains];
        }
        _currentQueryModel = _simpleQueryModel;
        await LoadPageAsync(_advancedQueryModel, 0);
    }

}