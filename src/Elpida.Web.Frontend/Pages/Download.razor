@page "/Download"

@using Elpida.Web.Frontend.Shared.Components
@using Elpida.Web.Frontend.Services

@inject DownloadService _downloadService;

<h1>Downloads</h1>

<h2>
    Binaries
</h2>

<p>We provide standalone binaries for a variety of operating systems and cpu architecures:</p>

<div class="download-group">
    @foreach (var group in _downloadService.BinariesDownloadLinks.GroupBy(l => l.Name))
    {
        <GroupBox Title="@group.Key">
            @foreach (var link in group)
            {
                <div class="download-links-container">
                    <LinkButton Href="@link.MainLink" Size="Size.Small">
                        <IconWithText IconName="download">
                            @link.Architecture (.@link.FileType)
                        </IconWithText>
                    </LinkButton>
                    <NavLink href="@link.ChecksumLink">
                        sha256sum
                    </NavLink>
                </div>
            }
        </GroupBox>
    }
</div>

<hr/>

<h2>
    Sources:
</h2>
<p>You can also download the sources of both the application and the web stack:</p>

<div class="download-group">
    @foreach (var link in _downloadService.SourcesDownloadLinks)
    {
        <GroupBox Title="@link.Name">
            <div class="download-links-container">
                <LinkButton Href="@link.MainLink" Size="Size.Small">
                    <IconWithText IconName="download">
                        @link.Architecture (.@link.FileType)
                    </IconWithText>
                </LinkButton>
            </div>
        </GroupBox>
    }
</div>
<hr/>

<h2>
    How to check the files for integrity
</h2>
<p>
    It is advised to check the downloaded files for integrity. For this we provide checksums for each binary file.
</p>

<h3>
    For Linux:
</h3>
<p>
    Download the app image and SHA256SUMS(via the link bellow each download button) and place them on the same
    directory.
    Open a terminal and navigate
    on that directory. The enter the following command:
</p>
<kbd>
    sha256sum -c SHA256SUMS
</kbd>
<p>
    It should output:
</p>
<samp>
    ./Elpida-latest-x86_64.AppImage: OK
</samp>
<p>
    If it outputs something like this:
</p>
<samp>
    ./Elpida-latest-x86_64.AppImage: FAIL <br/>
    sha256sum: WARNING: 1 computed checksum did NOT match
</samp>
<p>
    Then the file is corrupted. You should download again the main file and try again. If it fails all the time and
    there is not a
    problem
    with your setup (eg. Network connection, bad storage etc). Please report it to us by opening a ticket at the
    <NavLink href="https://gitlab.com/dev-hood/elpida/elpida">
        repository
    </NavLink>
</p>

<h3>
    For Windows:
</h3>
<p>
    Download the app image and SHA256SUMS(via the link bellow each download button) and place them on the same
    directory.
    Open a PowerShell and navigate
    on that directory. The enter the following command:
</p>
<kbd>
    certUtil -hashfile .\Elpida-latest-x86_64.zip SHA256
</kbd>
<p>
    It should output something like this:
</p>
<samp>
    SHA256 hash of .\Elpida-latest-x86_64.zip:<br/>
    'large random string'
</samp>
<p>
    Now you should compare the 'large random string' with the corresponding 'large random string' inside the SHA256SUMS
    file.
    Unfortunately there is no easy/straightforward way to do this on windows. You either copy both strings on a text
    editor
    and check if they are the same or use a 3rd party tool.
    If the strings do not match, the the main file is corrupted. You should download again the main file and try again.
    If the check fails all the time and there is not a problem
    with your setup (eg. Network connection, bad storage etc). Please report it to us by opening a ticket at the
    <a href="https://gitlab.com/dev-hood/elpida/elpida">repository</a>
</p>

@code {

}