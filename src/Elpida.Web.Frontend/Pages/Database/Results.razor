@page "/Database/Results"
@using Elpida.Web.Frontend.Shared.Components
@using Elpida.Web.Frontend.Services
@using Elpida.Backend.Services.Abstractions.Dtos.Result;
@using Elpida.Backend.Services.Abstractions.Dtos

<h3>Results</h3>

<PagedCollection Service="_service" TDto="BenchmarkResultDto" TPreview="BenchmarkResultPreviewDto">

    <LinkButton Class="collection-item-link" Href="@GetResultLink(context)">
        <img alt="@GetVendorImageAltString(context)" src="@GetVendorImage(context)" class="collection-item-icon" loading="lazy">
        <img alt="@GetBenchmarkImageAltString(context)" src="@GetBenchmarkImage(context)" class="collection-item-icon" loading="lazy">
        <div class="collection-item-name-container">
            <span>@context.TimeStamp</span>
            <span class="collection-item-name">@context.CpuModelName</span>
        </div>
        <div class="collection-item-details-container">
            <span class="collection-item-name">
                @context.BenchmarkName
            </span>
            <span class="result-value">@GetScoreString(context)</span>
        </div>

    </LinkButton>

</PagedCollection>


@inject ResultsFrontEndService _service;

@code {

    private static string GetVendorImage(BenchmarkResultPreviewDto dto)
    {
        return $"./assets/cpus/{dto.CpuVendor}.svg";
    }

    private static string GetBenchmarkImage(BenchmarkResultPreviewDto dto)
    {
        return $"./assets/benchmarks/{dto.BenchmarkUuid}.svg";
    }

    private static string GetResultLink(FoundationDto dto)
    {
        return $"/Database/Result/{dto.Id}";
    }

    private static string GetVendorImageAltString(BenchmarkResultPreviewDto dto)
    {
        return $"{dto.CpuVendor} logo";
    }

    private static string GetBenchmarkImageAltString(BenchmarkResultPreviewDto dto)
    {
        return $"{dto.BenchmarkName} representative image";
    }

    private static string GetScoreString(BenchmarkResultPreviewDto dto)
    {
        var (value, suffix) = ValueConverterService.ConvertToSI(dto.Score);
        return $"{value} {suffix}{dto.BenchmarkScoreUnit}";
    }

}